plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'groovy'
    id 'com.bmuschko.docker-remote-api' version '6.6.1'
}
version = '1.0.7'


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "com.auth0:java-jwt:${jwtVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "org.javassist:javassist:${javassistVersion}"
    // workaround for ${javassist.version} placeholder issue
    implementation 'mysql:mysql-connector-java'
    implementation "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
    implementation 'log4j:log4j'

    implementation platform("com.amazonaws:aws-java-sdk-bom:${awsSqsVersion}")
    implementation "com.amazonaws:aws-java-sdk-sqs"

    implementation "com.itextpdf:itextpdf:${itextVersion}"

    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    testImplementation "com.tngtech.archunit:archunit-junit4:${archUnitVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    testImplementation platform("org.spockframework:spock-bom:${spockVersion}")
    testImplementation 'org.spockframework:spock-core'
    testImplementation "com.h2database:h2:${h2Version}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
    testImplementation "org.testcontainers:spock:${testContainerVersion}"
    testImplementation "org.testcontainers:mongodb:${testContainerVersion}"
    testImplementation "org.testcontainers:mysql:${testContainerVersion}"
}

test {
    useJUnitPlatform()
    filter {
        excludeTestsMatching "*IT"
    }
}

task cleanStatics(type: Delete) {
    delete "src/main/resources/public"
}
clean.dependsOn cleanStatics

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

docker {
    registryCredentials {
        username = 'wacik93'
        password = 'wpIT4hIpKL'
    }
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/libs/Dockerfile')
    from 'adoptopenjdk/openjdk11'
    copyFile jar.archiveFileName.get(), '/app.jar'
    entryPoint 'java'
    defaultCommand '-jar', '-Dspring.profiles.active=prod', '/app.jar'
    exposePort 8888
    instruction 'HEALTHCHECK CMD curl -f http://localhost:8080/health || exit 1'
}

task buildImage(type: DockerBuildImage) {
    inputDir = createDockerfile.destFile.get().asFile.parentFile
    images = ["wacik93/administration-app:${version}"]
    dependsOn createDockerfile
}

task pushImage(type: DockerPushImage) {
    images = buildImage.images
    dependsOn buildImage
}